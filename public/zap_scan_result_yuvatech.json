[
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 111,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "111",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/apple-touch-icon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "0",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 97,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "97",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/favicon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 110,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "110",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-192.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 100,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "100",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-192-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "3",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 113,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "113",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-512.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "4",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 6,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "6",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/sitemap.xml",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "5",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 99,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "99",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-512-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "6",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 112,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "112",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/responsive.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "7",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 114,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "114",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/skeleton.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "8",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 7,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "9",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 117,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "10",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 50,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "11",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 118,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "12",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 4,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "4",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/robots.txt",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "13",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 43,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "14",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 111,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "111",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/apple-touch-icon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "15",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 113,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "113",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-512.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "16",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 99,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "99",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-512-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "17",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 110,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "110",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-192.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "18",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 97,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "97",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/favicon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "19",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 100,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "100",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web/icon-192-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "20",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 116,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "116",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/font-awesome.min.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "21",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 4,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "4",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/robots.txt",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "22",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 114,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "114",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/skeleton.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "23",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 112,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "112",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/responsive.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "24",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 116,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "116",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/font-awesome.min.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "25",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 119,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "119",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/base.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "26",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 4,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "4",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/robots.txt",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "27",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 124,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "124",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/style.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "28",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 122,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "29",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 120,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "30",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 123,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "31",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 121,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "32",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 6,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "6",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/sitemap.xml",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "33",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 125,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "34",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 119,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "119",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/base.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "35",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 124,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "124",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/style.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "36",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 132,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "37",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 133,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "133",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/custom.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "38",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 133,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "133",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/custom.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "39",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 157,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "157",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css-7ed419b30ef59.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "40",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 158,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "158",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "41",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 157,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "157",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css-7ed419b30ef59.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "42",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 162,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "43",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 158,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "158",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "44",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 160,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "160",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/fontello.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "45",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 163,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "46",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 160,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "160",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/fontello.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "47",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 165,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "48",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 172,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "172",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/ie8.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "49",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 159,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "159",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "50",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 172,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "172",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/ie8.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "51",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 181,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "181",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5Cone.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "52",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 159,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "159",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "53",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 181,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "181",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5Cone.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "54",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 184,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "184",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5Cthree.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "55",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 184,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "184",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5Cthree.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "56",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 185,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "185",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/img%5CBioFungiside.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "57",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 185,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "185",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/img%5CBioFungiside.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "58",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 123,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "59",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 50,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "60",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 123,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "61",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 182,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "182",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css-d0c4fdcce06b6.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "62",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 117,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "63",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 50,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "64",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 125,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "65",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 121,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "66",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 122,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "67",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 117,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "68",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 163,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "69",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 121,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "70",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 50,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "71",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 123,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "72",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 125,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "73",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 165,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "74",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 43,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "75",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 162,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "76",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 118,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "77",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 120,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "78",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 182,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "182",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css-d0c4fdcce06b6.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "79",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 132,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "80",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 7,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "81",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 50,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "82",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 123,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "83",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 187,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "187",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/img%5CMicronutrients1.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "84",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 165,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "85",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 122,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "86",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 162,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "87",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 118,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "88",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 125,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "89",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 117,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "90",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 43,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "91",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 121,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "92",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 163,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "93",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 186,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "186",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/animate.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "94",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 7,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "95",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 120,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "96",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 132,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "97",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 50,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "98",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 123,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "99",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 165,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "100",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 125,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "101",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 162,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "102",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 122,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "103",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 43,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "104",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 132,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "105",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 7,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "106",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 117,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "107",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 121,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "108",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 118,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "109",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 163,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "110",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 187,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "187",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/img%5CMicronutrients1.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "111",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 120,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "112",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 186,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "186",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/animate.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "113",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 165,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "114",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 50,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "115",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 123,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "116",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 125,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "117",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 162,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "118",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 43,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "119",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 132,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "120",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 122,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "121",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 117,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "122",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 118,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "123",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 121,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "124",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 7,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "125",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 120,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "126",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 163,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "127",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 189,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "189",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/img%5CBio%20viricide.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "128",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 165,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "129",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 123,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "130",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 50,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "131",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 162,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "132",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 43,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "133",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 132,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "134",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 122,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "135",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 125,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "136",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 118,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "137",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 120,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "138",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 7,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "139",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 163,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "140",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 188,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "188",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/init.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "141",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 189,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "189",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/img%5CBio%20viricide.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "142",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bSELECT\\b and was detected in the element starting with: \"<script>\r\n\t\t\t\t\t\t\t\t\t\t\tfunction loadCatProducts() {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar categoryId = document.getElementById(\"category_id\").value;\r\n\t\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "Select",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 117,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "143",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 121,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "144",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 123,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "123",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/7.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "145",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 165,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "146",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 50,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "50",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/1.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "147",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 162,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "148",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 125,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "149",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 122,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "150",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 132,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "151",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 188,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "188",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/init.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "152",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Gallery</a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 43,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "153",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Gallery</a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 117,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "154",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 121,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "155",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 118,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "156",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 190,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "190",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak/two.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "157",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 120,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "158",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 165,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "159",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 163,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "160",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Gallery</a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 7,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "161",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 125,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "125",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/9.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "162",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 162,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "163",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 122,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "164",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 132,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "165",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 43,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "166",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 190,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "190",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak/two.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "167",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 121,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "121",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/5.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "168",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 165,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "165",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/2.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "169",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 118,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "170",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 117,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "171",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 120,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "172",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 163,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "173",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 162,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "162",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/10.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "174",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 122,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "122",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/3.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "175",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 132,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "132",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/4.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "176",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 7,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "177",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 43,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "43",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/index.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "178",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 120,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "120",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/8.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "179",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 118,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "118",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/6.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "180",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 163,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "163",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/11.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "181",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 117,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "117",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Enquiry.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "182",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 7,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "7",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "183",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 192,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "192",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C7.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "184",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 196,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "196",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re%5Cwatsapp.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "185",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 193,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "193",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C8.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "186",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 203,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "203",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-192.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "187",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 208,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "208",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-192-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "188",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 209,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "209",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-512.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "189",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 205,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "205",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/favicon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "190",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 192,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "192",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C7.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "191",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 196,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "196",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re%5Cwatsapp.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "192",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 193,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "193",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C8.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "193",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 197,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "194",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 198,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "195",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 208,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "208",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-192-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "196",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 203,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "203",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-192.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "197",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 206,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "198",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 205,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "205",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/favicon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "199",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 211,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "200",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 209,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "209",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-512.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "201",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 213,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "213",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-512-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "202",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 214,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "214",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C11.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "203",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "CVE-2020-11023\nCVE-2020-11022\n",
        "method": "GET",
        "evidence": "jquery-3.4.1.min.js",
        "pluginId": "10003",
        "cweid": "1395",
        "confidence": "Medium",
        "sourceMessageId": 194,
        "wascid": "-1",
        "description": "The identified library jquery, version 3.4.1 is vulnerable.",
        "messageId": "194",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/jquery-3.4.1.min.js",
        "tags": {
            "CVE-2020-11023": "https://nvd.nist.gov/vuln/detail/CVE-2020-11023",
            "OWASP_2017_A09": "https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities.html",
            "CVE-2020-11022": "https://nvd.nist.gov/vuln/detail/CVE-2020-11022",
            "OWASP_2021_A06": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
            "CWE-1395": "https://cwe.mitre.org/data/definitions/1395.html"
        },
        "reference": "https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/\n",
        "solution": "Please upgrade to the latest version of jquery.",
        "alert": "Vulnerable JS Library",
        "param": "",
        "attack": "",
        "name": "Vulnerable JS Library",
        "risk": "Medium",
        "id": "204",
        "alertRef": "10003"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 215,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "215",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/apple-touch-icon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "205",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 195,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "195",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/wow.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "206",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 218,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "218",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C10.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "207",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 216,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "208",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 217,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "217",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C9.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "209",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 214,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "214",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C11.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "210",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 213,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "213",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/icon-512-maskable.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "211",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 197,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "212",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 195,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "195",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/wow.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "213",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 198,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "214",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 215,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "215",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web/apple-touch-icon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "215",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 206,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "216",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 211,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "217",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 218,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "218",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C10.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "218",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 219,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "219",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re%5Ccallenq.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "219",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 217,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "217",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak%5C9.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "220",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 220,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "220",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/base.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "221",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 198,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "222",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 197,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "223",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 206,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "224",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 211,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "225",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 223,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "223",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "226",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 216,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "227",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bUSERNAME\\b and was detected in the element starting with: \"!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "username",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 194,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "194",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/jquery-3.4.1.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "228",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 219,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "219",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re%5Ccallenq.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "229",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 220,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "220",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/base.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "230",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 225,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "225",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/css?family=Montserrat:300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "231",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 210,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "210",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/bootstrap.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "232",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 224,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "233",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 212,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "212",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/style.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "234",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 197,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "235",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 206,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "236",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 198,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "237",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 211,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "238",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 216,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "239",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 227,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/bootstrap.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "240",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 194,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "194",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/jquery-3.4.1.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "241",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 223,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "223",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "242",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 225,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "225",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/css?family=Montserrat:300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "243",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 226,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "226",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/skeleton.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "244",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 202,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "202",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/bootstrap.min.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "245",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 197,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "246",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 224,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "247",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 211,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "248",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 198,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "249",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 206,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "250",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 216,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "251",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 210,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "210",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/bootstrap.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "252",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 226,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "226",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/skeleton.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "253",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 227,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "227",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/bootstrap.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "254",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 212,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "212",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/style.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "255",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 229,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "229",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/init.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "256",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 228,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "257",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 211,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "258",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 197,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "259",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 194,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "194",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/jquery-3.4.1.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "260",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 206,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "261",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 198,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "262",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 224,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "263",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 216,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "264",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 230,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "230",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/fontello.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "265",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 231,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "231",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/js/ie8.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "266",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 232,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "232",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/wow.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "267",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 233,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "233",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/callenq.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "268",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 229,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "229",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/init.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "269",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 202,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "202",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/bootstrap.min.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "270",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 228,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "271",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 216,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "272",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 224,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "273",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 230,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "230",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/fontello.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "274",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 233,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "233",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/callenq.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "275",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 231,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "231",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/js/ie8.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "276",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 232,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "232",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/wow.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "277",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 228,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "278",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 235,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "235",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/watsapp.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "279",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 211,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "280",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 236,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "236",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/plugins.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "281",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 198,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "282",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 206,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "283",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 197,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "284",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bSELECT\\b and was detected 3 times, the first in the element starting with: \"        k = new Set([\"click\", \"dblclick\", \"mouseup\", \"mousedown\", \"contextmenu\", \"mousewheel\", \"DOMMouseScroll\", \"mouseover\", \"m\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "select",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 207,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "207",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/bootstrap.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "285",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 224,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "286",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 216,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "287",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 228,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "288",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected 3 times, the first in the element starting with: \"                n.has(e) || 0 === n.size ? n.set(e, i) : console.error(`Bootstrap doesn't allow more than one instance per eleme\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 207,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "207",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/bootstrap.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "289",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 235,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "235",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/watsapp.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "290",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 236,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "236",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/plugins.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "291",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 240,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "292",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 224,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "293",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 206,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "294",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 211,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "295",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 198,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "296",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 197,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "297",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 216,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "298",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "CVE-2024-6531\n",
        "method": "GET",
        "evidence": "* Bootstrap v4.3.1",
        "pluginId": "10003",
        "cweid": "1395",
        "confidence": "Medium",
        "sourceMessageId": 234,
        "wascid": "-1",
        "description": "The identified library bootstrap, version 4.3.1 is vulnerable.",
        "messageId": "234",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/bootstrap.js",
        "tags": {
            "OWASP_2017_A09": "https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities.html",
            "OWASP_2021_A06": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
            "CWE-1395": "https://cwe.mitre.org/data/definitions/1395.html",
            "CVE-2024-6531": "https://nvd.nist.gov/vuln/detail/CVE-2024-6531"
        },
        "reference": "https://www.herodevs.com/vulnerability-directory/cve-2024-6531\nhttps://github.com/advisories/GHSA-vc8w-jr9v-vj7f\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-6531\nhttps://github.com/rubysec/ruby-advisory-db/blob/master/gems/bootstrap/CVE-2024-6531.yml\nhttps://github.com/twbs/bootstrap\n",
        "solution": "Please upgrade to the latest version of bootstrap.",
        "alert": "Vulnerable JS Library",
        "param": "",
        "attack": "",
        "name": "Vulnerable JS Library",
        "risk": "Medium",
        "id": "299",
        "alertRef": "10003"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 239,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "239",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/plugins.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "300",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 241,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "241",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/animate.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "301",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 228,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "302",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 207,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "207",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/bootstrap.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "303",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 243,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "304",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 242,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "305",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 198,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "198",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=44",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "306",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 216,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "216",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=41",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "307",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 206,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "206",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=43",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "308",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 197,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "197",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=42",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "309",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 211,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "211",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=39",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "310",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 240,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "311",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 224,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "312",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 228,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "313",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 239,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "239",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/plugins.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "314",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 241,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "241",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/animate.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "315",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 207,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "207",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/bootstrap.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "316",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 240,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "317",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 245,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "245",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/rating/rate.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "318",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 247,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "247",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/css?family=Rubik:300,300i,400,400i,500,500i,700,700i,900",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "319",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 224,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "320",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 246,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "321",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 244,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "322",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 248,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "323",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 250,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "250",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/jquery.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "324",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 243,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "325",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 242,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "326",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 249,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "327",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 251,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "328",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 228,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "329",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bUSER\\b and was detected in the element starting with: \"          // would stop cycling until user tapped out of it;\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "user",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 234,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "234",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/bootstrap.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "330",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 240,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "331",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 245,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "245",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/rating/rate.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "332",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 247,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "247",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/css?family=Rubik:300,300i,400,400i,500,500i,700,700i,900",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "333",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 224,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "224",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=40",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "334",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 243,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "335",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 242,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "336",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 250,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "250",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/jquery.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "337",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected 2 times, the first in the element starting with: \"        from: fromIndex,\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 234,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "234",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/bootstrap.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "338",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 228,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "339",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 246,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "340",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 248,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "341",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 244,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "342",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 240,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "343",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 251,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "344",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 249,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "345",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 252,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "346",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 254,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "347",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 255,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "348",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bTODO\\b and was detected 3 times, the first in the element starting with: \"    // TODO: Remove in v5\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "TODO",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 234,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "234",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/bootstrap.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "349",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 243,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "350",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 242,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "351",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 244,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "352",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 246,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "353",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 248,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "354",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 228,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "228",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=33",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "355",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 256,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "356",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 240,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "357",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 251,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "358",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 249,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "359",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 244,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "360",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 243,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "361",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 242,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "362",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 234,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "234",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/bootstrap.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "363",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 248,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "364",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 246,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "365",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 254,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "366",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 255,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "367",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 252,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "368",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 257,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "369",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 256,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "370",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 240,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "371",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 251,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "372",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 249,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "373",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 244,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "374",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 246,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "375",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 243,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "376",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 242,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "377",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 248,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "378",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 252,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "379",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 254,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "380",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 255,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "381",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 256,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "382",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 240,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "383",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 251,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "384",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 249,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "385",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 234,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "234",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/bootstrap.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "386",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 257,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "387",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 244,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "388",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 248,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "389",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 246,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "390",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 254,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "391",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 255,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "392",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 252,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "393",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 256,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "394",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 242,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "395",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 243,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "396",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 240,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "240",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=20",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "397",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 251,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "398",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 249,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "399",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 257,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "400",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 258,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "401",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 254,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "402",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 255,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "403",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 252,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "404",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 246,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "405",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 244,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "406",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 248,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "407",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 256,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "408",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 242,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "409",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 243,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "410",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 257,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "411",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 259,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "412",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 249,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "413",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 251,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "414",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 258,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "415",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 252,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "416",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 254,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "417",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 255,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "418",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 246,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "419",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 248,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "420",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 244,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "421",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 256,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "422",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 242,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "242",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=36",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "423",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 243,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=3",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "424",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 257,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "425",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 258,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "426",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 249,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "427",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 251,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "428",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 259,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "429",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 257,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "430",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 258,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "431",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 261,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "432",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 259,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "433",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 260,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "434",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 246,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "246",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=34",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "435",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 248,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "248",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=25",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "436",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 244,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "244",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=24",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "437",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 251,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "251",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=45",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "438",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 249,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "249",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=38",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "439",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 254,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "440",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 255,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "441",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 256,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "442",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 252,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "443",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 258,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "444",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 259,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "445",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 252,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "446",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 255,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "447",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 256,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "448",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 257,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "449",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 254,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "450",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 264,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "451",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 266,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "452",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 265,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "453",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 267,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "454",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 261,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "455",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 260,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "456",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 258,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "457",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 259,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "458",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 261,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "459",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 260,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "460",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 257,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "461",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 254,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "254",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=35",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "462",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 256,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=30",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "463",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 252,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "252",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=46",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "464",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 255,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "255",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=4",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "465",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 259,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "466",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 266,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "467",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 258,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "468",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 267,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "469",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 264,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "470",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 265,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "471",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bLATER\\b and was detected 8 times, the first in the element starting with: \"                        // IE8 throws error here and will not see later tests\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "later",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "472",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 261,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "473",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 260,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "474",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 267,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "475",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 266,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "476",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 264,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "477",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bBUG\\b and was detected 7 times, the first in the element starting with: \"                // We allow this because of a bug in IE8/9 that throws an error\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "bug",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "478",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 265,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "479",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 257,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "257",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=21",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "480",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 258,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "481",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 261,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "482",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 260,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "483",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 270,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "484",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 269,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "485",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 271,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "486",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 268,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "268",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/about.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "487",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 259,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "488",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 262,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "262",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/bootstrap.min.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "489",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 267,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "490",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bBUGS\\b and was detected 9 times, the first in the element starting with: \"                // https://bugs.jquery.com/ticket/4833\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "bugs",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "491",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 265,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "492",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 264,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "493",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 266,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "494",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 261,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "495",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 260,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "496",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 258,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "258",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=23",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "497",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 272,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "498",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 259,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "499",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 268,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "268",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/about.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "500",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 267,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "501",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 265,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "502",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bUSERNAME\\b and was detected 2 times, the first in the element starting with: \"            username: null,\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "username",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "503",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 264,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "504",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 266,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "505",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 271,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "506",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 270,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "507",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 269,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "508",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 262,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "262",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/bootstrap.min.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "509",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 261,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "510",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 273,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "511",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 259,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "259",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=56",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "512",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 260,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "513",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 274,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "514",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 267,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "515",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 264,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "516",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 265,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "517",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bQUERY\\b and was detected 3 times, the first in the element starting with: \"                        // IE 11/Edge don't find elements on a `[name='']` query in some cases.\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "query",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "518",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 269,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "519",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 270,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "520",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 266,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "521",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 271,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "522",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 272,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "523",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 261,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "524",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 260,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "525",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 276,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "526",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 273,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "527",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 274,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "528",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bUSER\\b and was detected 9 times, the first in the element starting with: \"                // Can be adjusted by the user\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "user",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "529",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 269,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "530",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 271,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "531",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 270,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "532",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 272,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "533",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 261,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "261",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=31",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "534",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 267,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "535",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 266,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "536",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 264,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "537",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 265,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "538",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 274,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "539",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 273,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "540",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 260,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=22",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "541",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 276,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "542",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 275,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "275",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/style.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "543",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bSELECT\\b and was detected 19 times, the first in the element starting with: \"                select,\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "select",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "544",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 269,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "545",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 271,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "546",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 270,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "547",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 272,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "548",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 266,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "549",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 264,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "550",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 267,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "551",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 265,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "552",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 277,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "553",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 273,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "554",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 274,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "555",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 276,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "556",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected 53 times, the first in the element starting with: \"            // Return just the one element from the set\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "557",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 278,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "558",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 269,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "559",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 271,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "560",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 272,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "561",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 270,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "562",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 275,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "275",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/style.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "563",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 265,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "265",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=18",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "564",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 264,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "264",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=26",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "565",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 267,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "267",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=47",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "566",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 266,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=32",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "567",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 277,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "568",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 273,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "569",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 274,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "570",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 276,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "571",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bTODO\\b and was detected 4 times, the first in the element starting with: \"                                        // TODO: identify versions\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "TODO",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "572",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 272,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "573",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 279,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "574",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 278,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "575",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 277,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "576",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 270,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "577",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 271,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "578",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 280,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "280",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/index.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "579",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 269,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "580",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 282,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "581",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 281,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "582",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 283,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "583",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 273,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "584",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 276,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "585",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 274,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "586",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bWHERE\\b and was detected 10 times, the first in the element starting with: \"        // For CommonJS and CommonJS-like environments where a proper `window`\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "where",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 222,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "587",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 278,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "588",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 272,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "589",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 279,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "590",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 277,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "591",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 284,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "284",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Acre",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "592",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 270,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "593",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 269,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "594",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 271,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "595",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 276,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "596",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 283,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "597",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 282,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "598",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 222,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "599",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 281,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "600",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 279,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "601",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 278,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "602",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 274,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "603",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 273,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "604",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 272,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "605",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 277,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "606",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 284,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "284",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Acre",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "607",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 269,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "269",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=65",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "608",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 271,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "271",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=49",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "609",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 270,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "270",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=66",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "610",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 283,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "611",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 281,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "612",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 282,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "613",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 276,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "614",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 278,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "615",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 279,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "616",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 277,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "617",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 274,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "618",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 273,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "619",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 272,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "272",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=28",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "620",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 286,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "286",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/1Kg.",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "621",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 285,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "622",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 287,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "623",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 288,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "624",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 283,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "625",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 281,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "626",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 282,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "627",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 276,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "628",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 278,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "629",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 279,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "630",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 222,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "222",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/jquery.min.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "631",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 274,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "274",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=17",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "632",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 273,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "273",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=59",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "633",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 289,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "634",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 277,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "635",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 286,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "286",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/1Kg.",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "636",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 288,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "637",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 285,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "638",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 287,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "639",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 283,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "640",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 282,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "641",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 281,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "642",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 276,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "276",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=50",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "643",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 279,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "644",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 278,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "645",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 290,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "290",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "646",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 277,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "647",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 292,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "648",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 291,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "649",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 288,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "650",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 285,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "651",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 287,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "652",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 289,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "653",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 293,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "654",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 282,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "655",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 281,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "656",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 283,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "657",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 294,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "658",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 278,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "659",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 279,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "660",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 290,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "290",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "661",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 277,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "277",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=60",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "662",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 289,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "663",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 288,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "664",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 285,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "665",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 291,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "666",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 287,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "667",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 292,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "668",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 293,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "669",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 278,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "278",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=52",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "670",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 283,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "671",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 279,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "672",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 282,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "673",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 281,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "674",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 294,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "675",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 290,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "290",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "676",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 295,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "677",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 289,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "678",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 288,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "679",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 287,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "680",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 285,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "681",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 291,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "682",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 292,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "683",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 293,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "684",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 283,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "685",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 282,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "686",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 279,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "279",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=64",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "687",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 294,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "688",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "POST",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 290,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "290",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "689",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 296,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "690",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 281,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "691",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 289,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "692",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 295,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "693",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 288,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "694",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 285,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "695",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 287,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "696",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 292,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "697",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 291,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "698",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 293,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "699",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 283,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "283",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "700",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 282,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "282",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=57",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "701",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 294,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "702",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 298,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "298",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/en.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "703",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 289,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "704",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 295,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "705",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 281,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "281",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=27",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "706",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 299,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "707",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 296,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "708",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 292,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "709",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 291,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "710",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 293,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "711",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 285,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "712",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 287,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "713",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 288,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "714",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 300,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "300",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/logo1.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "715",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 301,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "716",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 294,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "717",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 295,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "718",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 296,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "719",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 298,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "298",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/en.jpg",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "720",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 302,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "721",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 289,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "722",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 299,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "723",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 291,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "724",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 292,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "725",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 293,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "726",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 285,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "727",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 288,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "728",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 287,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "729",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 300,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "300",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/logo1.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "730",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 294,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "731",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 301,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "732",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 295,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "733",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 296,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "734",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 303,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "303",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Litre",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "735",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 289,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "736",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 299,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "737",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 302,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "738",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 291,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "739",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 292,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "740",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "User-controlled HTML attribute values were found. Try injecting special characters to see if XSS might be possible. The page at the following URL:\n\nhttps://www.greencareagrotech.com/re/category.php?id=51\n\nappears to include user input in:\na(n) [link] tag [sizes] attribute\n\nThe user input found was:\nid=51\n\nThe user-controlled value was:\n512x512",
        "method": "GET",
        "evidence": "",
        "pluginId": "10031",
        "cweid": "20",
        "confidence": "Low",
        "sourceMessageId": 285,
        "wascid": "20",
        "description": "This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
            "CWE-20": "https://cwe.mitre.org/data/definitions/20.html",
            "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html",
        "solution": "Validate all input and sanitize output it before writing to any HTML attributes.",
        "alert": "User Controllable HTML Element Attribute (Potential XSS)",
        "param": "id",
        "attack": "",
        "name": "User Controllable HTML Element Attribute (Potential XSS)",
        "risk": "Informational",
        "id": "741",
        "alertRef": "10031"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 287,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "287",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=53",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "742",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 288,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "288",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=54",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "743",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 301,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "744",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 293,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "745",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 304,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "746",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 294,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "747",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 296,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "748",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 295,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "749",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 303,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "303",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Litre",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "750",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 299,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "751",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 289,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "289",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=48",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "752",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 302,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "753",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 292,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "754",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 291,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "755",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 301,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "757",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 293,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "758",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 294,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "759",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 296,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "760",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 299,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "761",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 304,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "762",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 302,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "763",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 295,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "764",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 292,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "292",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=61",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "765",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 291,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "291",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=55",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "766",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 285,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "285",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=51",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "767",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 301,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "768",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 294,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "294",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=58",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "769",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 293,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "293",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=7",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "770",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 299,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "771",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 304,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "772",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 302,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "773",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 296,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "774",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 295,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "775",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 301,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "776",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script type=\"text/javascript\" src=\"//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 304,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "//translate.google.com/translate_a/element.js?cb=initializeGoogleTranslateElement",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "777",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 302,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "778",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 296,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "779",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 299,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "780",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 295,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "295",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=63",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "781",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 304,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "782",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 301,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "783",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 299,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "784",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 296,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "296",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=16",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "785",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 304,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://kit.fontawesome.com/a076d05399.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "786",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 302,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "787",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 306,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "306",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/1.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "788",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 301,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "789",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 299,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "299",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=67",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "790",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 302,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "791",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 301,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "301",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=5",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "792",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 305,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "305",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/2.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "793",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"galleryDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n        Gallery\r\n    </a>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 304,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "794",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 302,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "302",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=62",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "795",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 304,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "796",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 304,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "304",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/category.php?id=6",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "797",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 306,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "306",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/1.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "798",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 305,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "305",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/2.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "799",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bXXX\\b and was detected in the element starting with: \"        // xxx: for now i will just save one spline function to to\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "xxx",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "800",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bLATER\\b and was detected in the element starting with: \"                // convert jQuery collection to array to avoid conflicts later\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "later",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "801",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bBUG\\b and was detected 6 times, the first in the element starting with: \"                    // ie7 double-scroll bug\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "bug",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "802",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bQUERY\\b and was detected 10 times, the first in the element starting with: \"            var query = {};\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "query",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "803",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bUSER\\b and was detected 8 times, the first in the element starting with: \"                    // this implies that the user stopped moving a finger then released.\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "user",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "804",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bSELECT\\b and was detected 4 times, the first in the element starting with: \"                        toCreate = 'select';\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "select",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "805",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bFROM\\b and was detected 55 times, the first in the element starting with: \"        // Find new height from highest slide in view\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "from",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "806",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bTODO\\b and was detected 36 times, the first in the element starting with: \"                    // TODO: find a way to avoid such cloning\r\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "TODO",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 237,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "807",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 237,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "808",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 237,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "237",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/plugins.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "809",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 307,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "307",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Download.pdf",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "810",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 307,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "307",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/Download.pdf",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "811",
        "alertRef": "10021"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 290,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "381",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "category_id",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "812",
        "alertRef": "6-5"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 290,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "398",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "product_id",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "813",
        "alertRef": "6-5"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 290,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "415",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "name",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "814",
        "alertRef": "6-5"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 290,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "432",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "email_id",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "815",
        "alertRef": "6-5"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 290,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "494",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "message",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "816",
        "alertRef": "6-5"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 802,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "968",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "phone_no",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "1633",
        "alertRef": "6-5"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 802,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "985",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "subject",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "1634",
        "alertRef": "6-5"
    },
    {
        "sourceid": "3",
        "other": "Location header URI length: 38 [https://www.greencareagrotech.com/css/].\nPredicted response size: 338.\nResponse Body Length: 707.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10044",
        "cweid": "201",
        "confidence": "Medium",
        "sourceMessageId": 1167,
        "wascid": "13",
        "description": "The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).",
        "messageId": "1167",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css",
        "tags": {
            "OWASP_2021_A04": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-201": "https://cwe.mitre.org/data/definitions/201.html"
        },
        "reference": "",
        "solution": "Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.",
        "alert": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "param": "",
        "attack": "",
        "name": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "risk": "Low",
        "id": "1659",
        "alertRef": "10044-1"
    },
    {
        "sourceid": "3",
        "other": "Location header URI length: 37 [https://www.greencareagrotech.com/ak/].\nPredicted response size: 337.\nResponse Body Length: 707.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10044",
        "cweid": "201",
        "confidence": "Medium",
        "sourceMessageId": 1149,
        "wascid": "13",
        "description": "The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).",
        "messageId": "1149",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak",
        "tags": {
            "OWASP_2021_A04": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-201": "https://cwe.mitre.org/data/definitions/201.html"
        },
        "reference": "",
        "solution": "Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.",
        "alert": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "param": "",
        "attack": "",
        "name": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "risk": "Low",
        "id": "1660",
        "alertRef": "10044-1"
    },
    {
        "sourceid": "3",
        "other": "Location header URI length: 37 [https://www.greencareagrotech.com/js/].\nPredicted response size: 337.\nResponse Body Length: 707.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10044",
        "cweid": "201",
        "confidence": "Medium",
        "sourceMessageId": 1177,
        "wascid": "13",
        "description": "The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).",
        "messageId": "1177",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js",
        "tags": {
            "OWASP_2021_A04": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-201": "https://cwe.mitre.org/data/definitions/201.html"
        },
        "reference": "",
        "solution": "Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.",
        "alert": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "param": "",
        "attack": "",
        "name": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "risk": "Low",
        "id": "1666",
        "alertRef": "10044-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1201,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1201",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/rating",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1699",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1201,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1201",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/rating",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1702",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "Location header URI length: 37 [https://www.greencareagrotech.com/re/].\nPredicted response size: 337.\nResponse Body Length: 707.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10044",
        "cweid": "201",
        "confidence": "Medium",
        "sourceMessageId": 1184,
        "wascid": "13",
        "description": "The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).",
        "messageId": "1184",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re",
        "tags": {
            "OWASP_2021_A04": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-201": "https://cwe.mitre.org/data/definitions/201.html"
        },
        "reference": "",
        "solution": "Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.",
        "alert": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "param": "",
        "attack": "",
        "name": "Big Redirect Detected (Potential Sensitive Information Leak)",
        "risk": "Low",
        "id": "1703",
        "alertRef": "10044-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 1179,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "1706",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1208,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1208",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1712",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<b>Warning</b>:  Undefined variable $message in <b>/home/greencareagro/public_html/process.php</b> on line <b>101</b><br />",
        "pluginId": "90022",
        "cweid": "200",
        "confidence": "Medium",
        "sourceMessageId": 1179,
        "wascid": "13",
        "description": "This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "WSTG-v42-ERRH-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces",
            "WSTG-v42-ERRH-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling",
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.",
        "alert": "Application Error Disclosure",
        "param": "",
        "attack": "",
        "name": "Application Error Disclosure",
        "risk": "Medium",
        "id": "1713",
        "alertRef": "90022"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 1179,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "1715",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1208,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1208",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1719",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1179,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1722",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1179,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1725",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1179,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1179",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "1727",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1229,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1229",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1760",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1229,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1229",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/web",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1768",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1243,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1781",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1243,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1243",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/web",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1787",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1256,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1796",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1256,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1256",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/ak/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1799",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1262,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1262",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1800",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1260,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "1803",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1260,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1260",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/js/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1804",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1262,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1262",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/css/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1805",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1266,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1266",
        "inputVector": "",
        "url": "https://www.greencareagrotech.com/re/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "1806",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "POST",
        "evidence": "",
        "pluginId": "6",
        "cweid": "22",
        "confidence": "Low",
        "sourceMessageId": 1278,
        "wascid": "33",
        "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
        "messageId": "1437",
        "inputVector": "form",
        "url": "https://www.greencareagrotech.com/process.php",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "POLICY_SEQUENCE": "",
            "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
            "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
            "POLICY_DEV_FULL": "",
            "POLICY_QA_STD": "",
            "POLICY_QA_FULL": "",
            "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
            "POLICY_DEV_STD": ""
        },
        "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
        "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
        "alert": "Path Traversal",
        "param": "csrf_test_name",
        "attack": "process.php",
        "name": "Path Traversal",
        "risk": "High",
        "id": "2473",
        "alertRef": "6-5"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 1596,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "1596",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2481",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 1597,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/robots.txt",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2482",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10020",
        "cweid": "1021",
        "confidence": "Medium",
        "sourceMessageId": 1599,
        "wascid": "15",
        "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
        "messageId": "1599",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/sitemap.xml",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
            "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
        "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
        "alert": "Missing Anti-clickjacking Header",
        "param": "x-frame-options",
        "attack": "",
        "name": "Missing Anti-clickjacking Header",
        "risk": "Medium",
        "id": "2483",
        "alertRef": "10020-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 1597,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/robots.txt",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "2484",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 1596,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1596",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "2485",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1597,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/robots.txt",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2486",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10015",
        "cweid": "525",
        "confidence": "Low",
        "sourceMessageId": 1599,
        "wascid": "13",
        "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
        "messageId": "1599",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/sitemap.xml",
        "tags": {
            "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
            "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
        "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
        "alert": "Re-examine Cache-control Directives",
        "param": "cache-control",
        "attack": "",
        "name": "Re-examine Cache-control Directives",
        "risk": "Informational",
        "id": "2487",
        "alertRef": "10015"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1596,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1596",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2488",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10038",
        "cweid": "693",
        "confidence": "High",
        "sourceMessageId": 1599,
        "wascid": "15",
        "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
        "messageId": "1599",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/sitemap.xml",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
        "alert": "Content Security Policy (CSP) Header Not Set",
        "param": "",
        "attack": "",
        "name": "Content Security Policy (CSP) Header Not Set",
        "risk": "Medium",
        "id": "2489",
        "alertRef": "10038-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://unpkg.com/swiper/swiper-bundle.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 1597,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/robots.txt",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://unpkg.com/swiper/swiper-bundle.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "2490",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://unpkg.com/swiper/swiper-bundle.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 1596,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1596",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://unpkg.com/swiper/swiper-bundle.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "2491",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "<script src=\"https://unpkg.com/swiper/swiper-bundle.min.js\"></script>",
        "pluginId": "10017",
        "cweid": "829",
        "confidence": "Medium",
        "sourceMessageId": 1599,
        "wascid": "15",
        "description": "The page includes one or more script files from a third-party domain.",
        "messageId": "1599",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/sitemap.xml",
        "tags": {
            "OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
            "CWE-829": "https://cwe.mitre.org/data/definitions/829.html"
        },
        "reference": "",
        "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.",
        "alert": "Cross-Domain JavaScript Source File Inclusion",
        "param": "https://unpkg.com/swiper/swiper-bundle.min.js",
        "attack": "",
        "name": "Cross-Domain JavaScript Source File Inclusion",
        "risk": "Low",
        "id": "2492",
        "alertRef": "10017"
    },
    {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"https://unpkg.com/swiper/swiper-bundle.min.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 1599,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1599",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/sitemap.xml",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2493",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"https://unpkg.com/swiper/swiper-bundle.min.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 1596,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1596",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2494",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "No links have been found while there are scripts, which is an indication that this is a modern web application.",
        "method": "GET",
        "evidence": "<script src=\"https://unpkg.com/swiper/swiper-bundle.min.js\"></script>",
        "pluginId": "10109",
        "cweid": "-1",
        "confidence": "Medium",
        "sourceMessageId": 1597,
        "wascid": "-1",
        "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/robots.txt",
        "tags": {},
        "reference": "",
        "solution": "This is an informational alert and so no changes are required.",
        "alert": "Modern Web Application",
        "param": "",
        "attack": "",
        "name": "Modern Web Application",
        "risk": "Informational",
        "id": "2495",
        "alertRef": "10109"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1599,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1599",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/sitemap.xml",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2496",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1597,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/robots.txt",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2497",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1596,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1596",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2498",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1596,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1596",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2499",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1597,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1597",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/robots.txt",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2500",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1599,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1599",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/sitemap.xml",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2501",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1604,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1604",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css/main.02100835.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2502",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1604,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1604",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css/main.02100835.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2503",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1610,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1610",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/icon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2504",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1610,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1610",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/icon.png",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2505",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1607,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1607",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css/custom.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2506",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1607,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1607",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css/custom.css",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2507",
        "alertRef": "10021"
    },
    {
        "sourceid": "3",
        "other": "The following pattern was used: \\bTODO\\b and was detected in the element starting with: \"(()=>{var e={4600:(e,t)=>{var n;!function(){\"use strict\";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.lengt\", see evidence field for the suspicious comment/snippet.",
        "method": "GET",
        "evidence": "todo",
        "pluginId": "10027",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "WSTG-v42-INFO-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "",
        "solution": "Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.",
        "alert": "Information Disclosure - Suspicious Comments",
        "param": "",
        "attack": "",
        "name": "Information Disclosure - Suspicious Comments",
        "risk": "Informational",
        "id": "2508",
        "alertRef": "10027"
    },
    {
        "sourceid": "3",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10035",
        "cweid": "319",
        "confidence": "High",
        "sourceMessageId": 1611,
        "wascid": "15",
        "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
        "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
        "alert": "Strict-Transport-Security Header Not Set",
        "param": "",
        "attack": "",
        "name": "Strict-Transport-Security Header Not Set",
        "risk": "Low",
        "id": "2509",
        "alertRef": "10035-1"
    },
    {
        "sourceid": "3",
        "other": "1604231423, which evaluates to: 2020-11-01 17:20:23.",
        "method": "GET",
        "evidence": "1604231423",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2510",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1687547391, which evaluates to: 2023-06-24 00:39:51.",
        "method": "GET",
        "evidence": "1687547391",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2511",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1433087999, which evaluates to: 2015-05-31 21:29:59.",
        "method": "GET",
        "evidence": "1433087999",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2512",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1768516095, which evaluates to: 2026-01-16 03:58:15.",
        "method": "GET",
        "evidence": "1768516095",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2513",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "2005441023, which evaluates to: 2033-07-20 08:27:03.",
        "method": "GET",
        "evidence": "2005441023",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2515",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1724754687, which evaluates to: 2024-08-27 16:01:27.",
        "method": "GET",
        "evidence": "1724754687",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2517",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1804477439, which evaluates to: 2027-03-08 09:13:59.",
        "method": "GET",
        "evidence": "1804477439",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2518",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1714657791, which evaluates to: 2024-05-02 19:19:51.",
        "method": "GET",
        "evidence": "1714657791",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2519",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1784335871, which evaluates to: 2026-07-18 06:21:11.",
        "method": "GET",
        "evidence": "1784335871",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2520",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1887473919, which evaluates to: 2029-10-23 23:48:39.",
        "method": "GET",
        "evidence": "1887473919",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2521",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1473231341, which evaluates to: 2016-09-07 12:25:41.",
        "method": "GET",
        "evidence": "1473231341",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2523",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1770035416, which evaluates to: 2026-02-02 18:00:16.",
        "method": "GET",
        "evidence": "1770035416",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2524",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1958414417, which evaluates to: 2032-01-23 01:30:17.",
        "method": "GET",
        "evidence": "1958414417",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2525",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1990404162, which evaluates to: 2033-01-27 07:32:42.",
        "method": "GET",
        "evidence": "1990404162",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2526",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1804603682, which evaluates to: 2027-03-09 20:18:02.",
        "method": "GET",
        "evidence": "1804603682",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2527",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1502002290, which evaluates to: 2017-08-06 12:21:30.",
        "method": "GET",
        "evidence": "1502002290",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2528",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1444681467, which evaluates to: 2015-10-13 01:54:27.",
        "method": "GET",
        "evidence": "1444681467",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2529",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1735328473, which evaluates to: 2024-12-28 01:11:13.",
        "method": "GET",
        "evidence": "1735328473",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2530",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1926607734, which evaluates to: 2031-01-19 22:18:54.",
        "method": "GET",
        "evidence": "1926607734",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2531",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "2022574463, which evaluates to: 2034-02-03 15:44:23.",
        "method": "GET",
        "evidence": "2022574463",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2532",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1839030562, which evaluates to: 2028-04-11 07:19:22.",
        "method": "GET",
        "evidence": "1839030562",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2533",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1530992060, which evaluates to: 2018-07-08 01:04:20.",
        "method": "GET",
        "evidence": "1530992060",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2534",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1700485571, which evaluates to: 2023-11-20 18:36:11.",
        "method": "GET",
        "evidence": "1700485571",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2535",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1894986606, which evaluates to: 2030-01-18 22:40:06.",
        "method": "GET",
        "evidence": "1894986606",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2536",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "2054922799, which evaluates to: 2035-02-13 01:23:19.",
        "method": "GET",
        "evidence": "2054922799",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2537",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1873313359, which evaluates to: 2029-05-13 02:19:19.",
        "method": "GET",
        "evidence": "1873313359",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2538",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1560198380, which evaluates to: 2019-06-11 01:56:20.",
        "method": "GET",
        "evidence": "1560198380",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2539",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1732584193, which evaluates to: 2024-11-26 06:53:13.",
        "method": "GET",
        "evidence": "1732584193",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2540",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1732584194, which evaluates to: 2024-11-26 06:53:14.",
        "method": "GET",
        "evidence": "1732584194",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2541",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "1540483477, which evaluates to: 2018-10-25 21:34:37.",
        "method": "GET",
        "evidence": "1540483477",
        "pluginId": "10096",
        "cweid": "200",
        "confidence": "Low",
        "sourceMessageId": 1611,
        "wascid": "13",
        "description": "A timestamp was disclosed by the application/web server. - Unix",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
            "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html",
            "CWE-200": "https://cwe.mitre.org/data/definitions/200.html"
        },
        "reference": "https://cwe.mitre.org/data/definitions/200.html",
        "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.",
        "alert": "Timestamp Disclosure - Unix",
        "param": "",
        "attack": "",
        "name": "Timestamp Disclosure - Unix",
        "risk": "Low",
        "id": "2542",
        "alertRef": "10096"
    },
    {
        "sourceid": "3",
        "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
        "method": "GET",
        "evidence": "",
        "pluginId": "10021",
        "cweid": "693",
        "confidence": "Medium",
        "sourceMessageId": 1611,
        "wascid": "15",
        "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
        "messageId": "1611",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js/main.83947407.js",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
        "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
        "alert": "X-Content-Type-Options Header Missing",
        "param": "x-content-type-options",
        "attack": "",
        "name": "X-Content-Type-Options Header Missing",
        "risk": "Low",
        "id": "2552",
        "alertRef": "10021"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "HTTP/1.1 200 OK",
        "pluginId": "40035",
        "cweid": "538",
        "confidence": "Low",
        "sourceMessageId": 2029,
        "wascid": "13",
        "description": "A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.",
        "messageId": "2029",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/.bzr",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "POLICY_QA_FULL": "",
            "CWE-538": "https://cwe.mitre.org/data/definitions/538.html",
            "WSTG-v42-CONF-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html",
        "solution": "Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.",
        "alert": "Hidden File Found",
        "param": "",
        "attack": "",
        "name": "Hidden File Found",
        "risk": "Medium",
        "id": "2553",
        "alertRef": "40035"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "HTTP/1.1 200 OK",
        "pluginId": "40035",
        "cweid": "538",
        "confidence": "Low",
        "sourceMessageId": 2031,
        "wascid": "13",
        "description": "A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.",
        "messageId": "2031",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/._darcs",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "POLICY_QA_FULL": "",
            "CWE-538": "https://cwe.mitre.org/data/definitions/538.html",
            "WSTG-v42-CONF-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html",
        "solution": "Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.",
        "alert": "Hidden File Found",
        "param": "",
        "attack": "",
        "name": "Hidden File Found",
        "risk": "Medium",
        "id": "2554",
        "alertRef": "40035"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "HTTP/1.1 200 OK",
        "pluginId": "40035",
        "cweid": "538",
        "confidence": "Low",
        "sourceMessageId": 2033,
        "wascid": "13",
        "description": "A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.",
        "messageId": "2033",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/BitKeeper",
        "tags": {
            "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
            "POLICY_QA_FULL": "",
            "CWE-538": "https://cwe.mitre.org/data/definitions/538.html",
            "WSTG-v42-CONF-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
            "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
        },
        "reference": "https://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html",
        "solution": "Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.",
        "alert": "Hidden File Found",
        "param": "",
        "attack": "",
        "name": "Hidden File Found",
        "risk": "Medium",
        "id": "2555",
        "alertRef": "40035"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2047,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2047",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2556",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2050,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2050",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2557",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2053,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2053",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2558",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2059,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2059",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2559",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2064,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2064",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2560",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2068,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2068",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2561",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2072,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2072",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2562",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2076,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2076",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2563",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2079,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2079",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2564",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2083,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2083",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2565",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2085,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2085",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2566",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2090,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2090",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2567",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2091,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2091",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2568",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2098,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2098",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2569",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2099,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2099",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2570",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2101,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2101",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2571",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2107,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2107",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2572",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2111,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2111",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2573",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2113,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2113",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2574",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2115,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2115",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2575",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2117,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2117",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2576",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2119,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2119",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2577",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2121,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2121",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2578",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2124,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2124",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2579",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2125,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2125",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2580",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2127,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2127",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2581",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2132,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2132",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2582",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2133,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2133",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2583",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2134,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2134",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2584",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2135,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2135",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2585",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2139,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2139",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2586",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2140,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2140",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2587",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2141,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2141",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2588",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2143,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2143",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2589",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2145,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2145",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2590",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2151,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2151",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2591",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2152,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2152",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2592",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2153,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2153",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2593",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2154,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2154",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2594",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2155,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2155",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2595",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2162,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2162",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2596",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2163,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2163",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2597",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2164,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2164",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2598",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2165,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2165",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2599",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2166,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2166",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2600",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2174,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2174",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2601",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2175,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2175",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2602",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2176,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2176",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2603",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2177,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2177",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2604",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2178,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2178",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/assets",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2605",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2189,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2189",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2606",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2190,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2190",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2607",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2191,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2191",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2608",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2199,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2199",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2609",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2200,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2200",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2610",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2201,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2201",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2611",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2206,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2206",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/css",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2612",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2207,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2207",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2613",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2208,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2208",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2614",
        "alertRef": "10104"
    },
    {
        "sourceid": "1",
        "other": "",
        "method": "GET",
        "evidence": "",
        "pluginId": "10104",
        "cweid": "0",
        "confidence": "Medium",
        "sourceMessageId": 2210,
        "wascid": "0",
        "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
        "messageId": "2210",
        "inputVector": "",
        "url": "https://yuvatech-computers.org.in/static/js",
        "tags": {},
        "reference": "https://owasp.org/wstg",
        "solution": "",
        "alert": "User Agent Fuzzer",
        "param": "Header User-Agent",
        "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "name": "User Agent Fuzzer",
        "risk": "Informational",
        "id": "2615",
        "alertRef": "10104"
    }
]